
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import aiosqlite
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import BotCommand
from dotenv import load_dotenv
import os

load_dotenv()

bot_admin = Bot(token=os.getenv('ADMIN_TOKEN'))
dp_admin = Dispatcher()
other_bot = Bot(token=os.getenv('BOT_TOKEN'))


async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="complaints", description="–†–∞–±–æ—Ç–∞ —Å –∂–∞–ª–æ–±–∞–º–∏"),
        BotCommand(command="add_event", description="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
    ]
    await bot_admin.set_my_commands(commands)


class AdminStates(StatesGroup):
    event_name = State()
    event_date = State()
    event_description = State()
    event_photo = State()
    event_address = State()

complaint_states = {}

async def is_admin(user_id):
    async with aiosqlite.connect('petdating.db') as db:
        async with db.execute("SELECT AdminUserId FROM Admins") as cursor:
            admins = await cursor.fetchall()
    admin_ids = [int(admin[0]) for admin in admins]
    return int(user_id) in admin_ids

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –±–æ—Ç–∞-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp_admin.message(Command("start"))
async def send_welcome(message: Message):
    if await is_admin(message.from_user.id):
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–∞–ª–æ–±
@dp_admin.message(Command("complaints"))
async def show_complaints(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    async with (aiosqlite.connect('petdating.db') as db):
        async with db.execute('''
            SELECT r.ReportDescription, u.UserId, u.PetName, u.Age, u.Breed, u.About FROM Reports r
            JOIN UserProfiles u ON r.ReportedId = u.UserId''') as cursor:
            complaints = await cursor.fetchall()

    if not complaints:
        await message.answer("–ñ–∞–ª–æ–± –ø–æ–∫–∞ –Ω–µ—Ç", reply_markup=types.ReplyKeyboardRemove())
        return

    complaint_states[message.from_user.id] = {"complaints": complaints, "index": 0}
    await send_next_complaint(message)

async def send_next_complaint(message: Message):
    state = complaint_states.get(message.from_user.id)
    if not state or state["index"] >= len(state["complaints"]):
        await message.answer("–í—Å–µ –∂–∞–ª–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã", reply_markup=types.ReplyKeyboardRemove())
        complaint_states.pop(message.from_user.id, None)
        return

    complaint = state["complaints"][state["index"]]
    complaint_id, user_id, pet_name, age, breed, about = complaint

    caption = f"–ñ–∞–ª–æ–±–∞:\n–ò–º—è: {pet_name}\n–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n–ü–æ—Ä–æ–¥–∞: {breed}\n–û–ø–∏—Å–∞–Ω–∏–µ: {about}\n–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã: {complaint_id}"

    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É"), KeyboardButton(text="‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
        [KeyboardButton(text="üí§ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")]
    ], resize_keyboard=True)

    await message.answer(caption, reply_markup=keyboard)

    state["index"] += 1

    @dp_admin.message(F.text.in_({"‚ùå –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "üí§ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"}))
    async def handle_complaint_action(message: Message):
        user_id = message.from_user.id
        state = complaint_states.get(user_id)

        if not state:
            await message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–± –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            return

        if message.text == "üí§ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å":
            complaint_states.pop(user_id, None)
            await message.answer("–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–±")
            return

        complaint = state["complaints"][state["index"] - 1]
        complaint_id, target_user_id, *_ = complaint

        async with aiosqlite.connect('petdating.db') as db:
            if message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
                await db.execute('DELETE FROM UserProfiles WHERE UserId = ?', (target_user_id,))
                await db.execute('DELETE FROM Reports WHERE ReportedId = ?', (target_user_id,))
                await message.answer("–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞")
                try:
                    await other_bot.send_message(
                        chat_id=target_user_id,
                        text="–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—É—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏"
                    )
                except Exception as e:
                    await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            elif message.text == "‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
                await db.execute('DELETE FROM Complaints WHERE ComplaintId = ?', (complaint_id,))
                await message.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞.")
            await db.commit()

        await send_next_complaint(message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
@dp_admin.message(Command("add_event"))
async def add_event(message: types.Message, state = FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")]
        ],
        resize_keyboard=True,
    ))
    await state.set_state(AdminStates.event_name)

@dp_admin.message(AdminStates.event_name)
async def get_pet_name(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        await state.clear()
        return
    if message.text == "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è":
        await state.clear()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
        return
    event_name = message.text
    await state.update_data(event_name=event_name)
    await message.reply(f"–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–æ–±—ã—Ç–∏—è")
    await state.set_state(AdminStates.event_address)

# –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp_admin.message(AdminStates.event_address)
async def get_age(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        await state.clear()
        return
    if message.text == "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è":
        await state.clear()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
        return
    event_address = message.text
    await state.update_data(event_address=event_address)
    await message.reply(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")
    await state.set_state(AdminStates.event_date)

# –≤–≤–æ–¥ –ø–æ—Ä–æ–¥—ã
@dp_admin.message(AdminStates.event_date)
async def get_breed(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        await state.clear()
        return
    if message.text == "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è":
        await state.clear()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
        return
    event_date = message.text
    await state.update_data(event_date=event_date)
    await message.reply(f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
    await state.set_state(AdminStates.event_description)

# –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
@dp_admin.message(AdminStates.event_description)
async def get_about(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        await state.clear()
        return
    if message.text == "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è":
        await state.clear()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
        return
    event_description = message.text
    await state.update_data(event_description = event_description)
    data = await state.get_data()
    event_name = data['event_name']
    event_address = data['event_address']
    event_description = data['event_description']
    event_date = data['event_date']

    await state.clear()

    await save_event(event_name, event_description, event_date, event_address)

    await message.answer("–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:", reply_markup=types.ReplyKeyboardRemove())

    caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event_name}\n–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event_date}\n–ê–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event_address}\n–û–ø–∏—Å–∞–Ω–∏–µ: {event_description}"

    await message.answer(caption)

async def save_event(event_name, event_description, event_date, event_address):
    async with aiosqlite.connect('petdating.db') as db:
        await db.execute('''
            INSERT OR REPLACE INTO Events (EventName, Description, EventDate, Address)
            VALUES (?, ?, ?, ?)
        ''', (event_name, event_description, event_date, event_address))
        await db.commit()

async def main():
    await set_bot_commands()
    await dp_admin.start_polling(bot_admin)

if __name__ == "__main__":
    asyncio.run(main())